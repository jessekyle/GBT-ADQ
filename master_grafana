#! /usr/bin/python

from __future__ import print_function
import subprocess
import sys
import os
from sys import stdout
from time import sleep




#WHICH NODES IS BREAKTHROUGH LISTEN OBSERVING WITH (BANKS):

banks = {}
for x in range(0,8):
    banks["blc0" + str(x)] = subprocess.check_output(["redis-cli", 
                                                        "mget", "blc0" + 
                                                        str(x) + "_observing"])
for x in range(10,18) + range(20,28) + range(30,38):
    banks["blc" + str(x)] = subprocess.check_output(["redis-cli", 
                                                        "mget", "blc" + 
                                                        str(x) + "_observing"])
#generates bank key with observation status as value

os.system("rm /home/jkyle/blcbanks/banks.txt")
#remove created text file to ensure overwrite with new status

for x in banks:
    if banks[x] == "on\n":
        nodes = []
        nodes.append(x.upper())
    else:
        continue
    for x in nodes:
        message = ("echo 'nodes,host=" + x.upper() +
                   ",region=us value=1' >> /home/jkyle/blcbanks/banks.txt")
        os.system(message)
#formatting for influxdb entry

if all(x == 'off\n' for x in banks.values()):
    message = "Breakthrough Listen is not observing.\n"
    message = ("echo 'nodes,host=Breakthrough\\ Listen\\ is\\ not\\ observing," +
                "region=us value=0' > /home/jkyle/blcbanks/banks.txt")
    os.system(message)
#formatting for influxdb entry

os.system("scp /home/jkyle/blcbanks/banks.txt jkyle@104.199.127.246:/home/jkyle/public_html/")
#transferrnig to virtual machine redis server




#GENERATES RAW FILES AND TELESCOPE DATA (GRAFANA):

os.system("rm /home/jkyle/grafana.txt")

bank0 = ('00', '01', '02', '03', '04', '05', '06', '07',
         '10', '11', '12', '13', '14', '15', '16', '17',
         '20', '21', '22', '23', '24', '25', '26', '27',
         '30', '31', '32', '33', '34', '35', '36', '37')

for x in bank0:
    try:
        y = ("BLC" + x)
        i = subprocess.check_output(["/home/jkyle/GBT-ADQ/mysql/blc/blc", ("blc" + x)])
        if i == i:
                os.system("echo '" + i[0:5].strip("\n") + "raw,host=" + 
                        i[5:].strip("\n") + ",region=us value=1' >> grafana.txt")
    except:
        continue
        #this will print an error code, not sure what influxdb will do

RA = subprocess.check_output("/home/jkyle/GBT-ADQ/mysql/show_mysql_ra")
os.system("echo '" + "ra,host=gbt,region=us value=" 
                + str(RA[0:8].strip("\n")) + "' >> grafana.txt")
#need to convert to HH:MM:SS

DEC = subprocess.check_output("/home/jkyle/GBT-ADQ/mysql/show_mysql_dec")
os.system("echo '" + "dec,host=gbt,region=us value=" 
                + str(DEC[0:8].strip("\n")) + "' >> grafana.txt")
#need to convert to DD:MM:SS

SOURCE = subprocess.check_output("/home/jkyle/GBT-ADQ/mysql/show_mysql_source")
os.system("echo '" + "source,host=" + SOURCE.strip("\n") 
                + ",region=us value=1" + "' >> grafana.txt")

DISH = subprocess.check_output("/home/jkyle/GBT-ADQ/mysql/show_mysql_ant")
os.system("echo '" + "dish,host=" + DISH.strip("\n") 
                + ",region=us value=1" + "' >> grafana.txt")

DATE = subprocess.check_output("/home/jkyle/GBT-ADQ/mysql/show_mysql_date")
os.system("echo '" + "date,host=" + DATE.strip("\n") 
                + ",region=us value=1" + "' >> grafana.txt")

DIR = subprocess.check_output("/home/jkyle/GBT-ADQ/mysql/show_mysql_data")
os.system("echo '" + "dir,host=" + DIR.strip("\n") 
                + ",region=us value=1" + "' >> grafana.txt")

REM = subprocess.check_output("/home/jkyle/GBT-ADQ/mysql/show_mysql_remaining")
os.system("echo '" + "rem,host=" + REM.strip("\n") 
                + ",region=us value=1" + "' >> grafana.txt")

os.system("scp /home/jkyle/grafana.txt jkyle@104.199.127.246:/home/jkyle/public_html/")




#PULL INPUT DATA FROM COMPUTE NODES (IOSTATUS):

os.system("~mattl/all_check_iostats > iostats")
stats = open("iostats")
data = [line.split() for line in stats.readlines()]

list = {}
for x in data:
    list["blc0\\ sda"] = data[2][1:]
    list["blc0\\ sdb"] = data[3][1:]
    list["blc1\\ sda"] = data[6][1:]
    list["blc1\\ sdb"] = data[7][1:]
    list["blc2\\ sda"] = data[10][1:]
    list["blc2\\ sdb"] = data[11][1:]
    list["blc3\\ sda"] = data[14][1:]
    list["blc3\\ sdb"] = data[15][1:]
    list["blc4\\ sda"] = data[18][1:]
    list["blc4\\ sdb"] = data[19][1:]
    list["blc5\\ sda"] = data[22][1:]
    list["blc5\\ sdb"] = data[23][1:]
    list["blc6\\ sda"] = data[26][1:]
    list["blc6\\ sdb"] = data[27][1:]
    list["blc7\\ sda"] = data[30][1:]
    list["blc7\\ sdb"] = data[31][1:]

os.system("rm iostats.txt")

for x in list.keys():
    y = list[str(x)]
    y = [float(i) for i in y]
    os.system("echo '" + str(x) +
              ",host=gbt,location=rkbs value=" + str(y[4]) +
             "' >> iostats.txt")
    os.system("echo '" + str(x) +
              ",host=gbt,location=wkbs value=" + str(y[5]) +
             "' >> iostats.txt")
    os.system("echo '" + str(x) +
              ",host=gbt,location=util value=" + str(y[-1]) +
             "' >> iostats.txt")

os.system("scp /home/jkyle/iostats.txt jkyle@104.199.127.246:/home/jkyle/public_html/")
















